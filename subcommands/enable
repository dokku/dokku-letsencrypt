#!/usr/bin/env bash
source "$PLUGIN_CORE_AVAILABLE_PATH/common/functions"
source "$PLUGIN_CORE_AVAILABLE_PATH/nginx-vhosts/functions"
source "$PLUGIN_AVAILABLE_PATH/letsencrypt/functions"
source "$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)/config"
set -eo pipefail
[[ $DOKKU_TRACE ]] && set -x

letsencrypt_acmeproxy_on() {
  #shellcheck disable=SC2034
  declare desc="enable ACME proxy for an app"
  local app="$1"
  local acme_port="$2"

  local app_root="$DOKKU_ROOT/$app"
  local app_config_dir="$app_root/nginx.conf.d"

  dokku_log_info1 "Enabling ACME proxy for ${app}..."

  # ensure the nginx.conf.d directory exists
  [[ -d "$app_config_dir" ]] || mkdir "$app_config_dir"

  # insert acme_port into config template, place resulting config in nginx.conf.d
  sigil -f "$PLUGIN_AVAILABLE_PATH/letsencrypt/templates/letsencrypt.conf.sigil" \
    ACME_PORT="$acme_port" \
    >"$app_config_dir/letsencrypt.conf"

  restart_nginx | sed "s/^/       /"
}

letsencrypt_acmeproxy_off() {
  #shellcheck disable=SC2034
  declare desc="disable ACME proxy for an app"
  local app="$1"

  local app_root="$DOKKU_ROOT/$app"
  local app_config_dir="$app_root/nginx.conf.d"

  dokku_log_info1 "Disabling ACME proxy for $app..."

  [[ -f "$app_config_dir/letsencrypt.conf" ]] && rm "$app_config_dir/letsencrypt.conf"

  restart_nginx | sed "s/^/       /"
}

letsencrypt_link() {
  #shellcheck disable=SC2034
  declare desc="symlink let's encrypt certificates so they can be found by dokku"

  local app="$1"
  local config_dir="$2"

  local app_root="$DOKKU_ROOT/$app"
  local le_root="$app_root/letsencrypt"
  local domain

  dokku_log_info1 "Installing let's encrypt certificates"

  # link the current config directory to 'current'
  ln -nsf "$config_dir" "$le_root/certs/current"

  # install the let's encrypt certificate for the app
  unset DOKKU_APP_NAME
  domain="$(get_app_domains "$app" | xargs | awk '{print $1}')"
  dokku certs:add "$app" "$config_dir/certificates/$domain.pem" "$config_dir/certificates/$domain.key"
  rm -f "$app_root/tls/server.letsencrypt.crt" "$app_root/tls/server.crt"
  cp "$config_dir/certificates/$domain.crt" "$app_root/tls/server.letsencrypt.crt"
  cp "$config_dir/certificates/$domain.crt" "$app_root/tls/server.crt"
}

letsencrypt_acme() {
  #shellcheck disable=SC2034
  declare desc="perform actual ACME validation procedure"
  declare app="$1" acme_port="$2"
  local FAKE_NGINX_CONF=false

  if [[ ! -f "$DOKKU_ROOT/$app/nginx.conf" ]]; then
    FAKE_NGINX_CONF=true
  fi

  letsencrypt_create_root "$app"

  dokku_log_info1 "Getting letsencrypt certificate for ${app}..."

  # read arguments from appropriate config file into the config array
  local config_dir=$(letsencrypt_configure_and_get_dir "$app" "$acme_port")
  local config_dir_in_pod="/mnt/dokku/home/dokku/$config_dir"
  local config_dir_on_host="$DOKKU_HOST_ROOT/$config_dir"
  read -r -a config <"$config_dir_in_pod/config"

  # run letsencrypt as a docker container using "certonly" mode
  # port 80 of the standalone webserver will be forwarded by the proxy
  set +e
  export DOKKU_UID=$(id -u)
  export DOKKU_GID=$(id -g)
  docker run --rm \
    "$PERMISSIONS_CALLS" \
    --user $DOKKU_UID:$DOKKU_GID \
    -p "$acme_port:$acme_port" \
    -v "$config_dir_on_host:/certs" \
    "${PLUGIN_IMAGE}:${PLUGIN_IMAGE_VERSION}" \
    "${config[@]}" run | sed "s/^/       /"

  local exit_code=$?
  set -e

  if [[ "$FAKE_NGINX_CONF" == "true" ]]; then
    rm "$DOKKU_ROOT/$app/nginx.conf"
  fi

  if [[ $exit_code != 0 ]]; then
    dokku_log_info1 "Certificate retrieval failed!"
    return $exit_code
  fi

  # got certificate
  dokku_log_info1 "Certificate retrieved successfully."
  letsencrypt_link "$app" "$container_config_dir"
  nginx_build_config "$app"
}

fn-lentsencrypt-enable() {
  declare APP="$1"
  local EXIT_CODE=0
  local acme_port domain

  verify_app_name "$APP"

  domain="$(get_app_domains "$APP" | xargs | awk '{print $1}')"
  if [[ -z "$domain" ]]; then
    dokku_log_warn "No domains detected for $APP"
    return 1
  fi

  dokku_log_info2 "Enabling letsencrypt for $APP"

  # dynamically choose a port for the letsencrypt standalone authenticator
  acme_port=$(get_available_port)

  letsencrypt_check_email "$APP"

  letsencrypt_acmeproxy_on "$APP" "$acme_port"
  letsencrypt_acme "$APP" "$acme_port" || EXIT_CODE=$? # remove ACME proxy even if this fails
  letsencrypt_acmeproxy_off "$APP"

  if [[ "$EXIT_CODE" == 0 ]]; then
    dokku_log_info1 "Done"
    return
  fi

  dokku_log_warn "Failed to setup letsencrypt"
  DOKKU_FAIL_EXIT_CODE="$EXIT_CODE" dokku_log_fail "Check log output for further information on failure"
}

cmd-letsencrypt-enable() {
  #shellcheck disable=SC2034
  declare desc="Enable or renew letsencrypt for an app"
  declare cmd="letsencrypt:enable"
  [[ "$1" == "$cmd" ]] && shift 1

  # Support --app/$DOKKU_APP_NAME flag by reordering args into "$cmd $DOKKU_APP_NAME $@"
  local argv=("$@")
  [[ -n "$DOKKU_APP_NAME" ]] && set -- $DOKKU_APP_NAME $@
  ##

  declare APP="$1"
  if [[ "$APP" == "--all" ]]; then
    for app in $(dokku_apps); do
      fn-lentsencrypt-enable "$app"
    done
  else
    fn-lentsencrypt-enable "$APP"
  fi
}

cmd-letsencrypt-enable "$@"
