#!/usr/bin/env bash
set -eo pipefail; [[ $DOKKU_TRACE ]] && set -x

reload_nginx () {
  case "$DOKKU_DISTRO" in
    ubuntu)
      sudo /etc/init.d/nginx reload > /dev/null
      ;;

    debian)
      sudo /usr/sbin/invoke-rc.d nginx reload > /dev/null
      ;;

    opensuse)
      sudo /sbin/service nginx reload > /dev/null
      ;;

    arch)
      sudo /usr/bin/systemctl reload nginx
      ;;
  esac
}

letsencrypt_acmeproxy_on () {
  dokku_log_info1 "Enabling ACME proxy for $APP..."

  if [[ ! -d "$APP_ROOT/nginx.conf.d" ]]; then
    mkdir "$APP_ROOT/nginx.conf.d"
  fi

  rm -f "$APP_ROOT/nginx.conf.d/letsencrypt.conf"
  cp "$(dirname "$0")/templates/letsencrypt.conf" "$APP_ROOT/nginx.conf.d"
  sed -i "s,{ACMEPORT},$ACMEPORT," "$APP_ROOT/nginx.conf.d/letsencrypt.conf"

  reload_nginx
}

letsencrypt_acmeproxy_off() {
  dokku_log_info1 "Disabling ACME proxy for $APP..."

  if [[ -f "$APP_ROOT/nginx.conf.d/letsencrypt.conf" ]]; then
    rm "$APP_ROOT/nginx.conf.d/letsencrypt.conf"
  fi

  reload_nginx
}

letsencrypt_update () {
  dokku_log_info1 "Updating letsencrypt docker image..."
  docker pull m3adow/letsencrypt-simp_le:latest
  dokku_log_verbose "done"
}

letsencrypt_link () {
  dokku_log_info1 "Symlinking let's encrypt certificates"
  LETSENCRYPT_CONFIG_DIR=$1

  # link the current config directory to 'current'
  ln -nsf $LETSENCRYPT_CONFIG_DIR $LETSENCRYPT_ROOT/certs/current

  # link the certificates from LETSENCRYPT_ROOT to the app's TLS certificate storage
  mkdir -p "$APP_SSL_ROOT"
  ln -nsf "$LETSENCRYPT_ROOT/certs/current/key.pem" "$APP_SSL_ROOT/server.key"
  ln -nsf "$LETSENCRYPT_ROOT/certs/current/fullchain.pem" "$APP_SSL_ROOT/server.crt"
}

letsencrypt_create_root () {
  # Set up folders
  if [ ! -d "$LETSENCRYPT_ROOT" ]; then
    mkdir -p "$LETSENCRYPT_ROOT"
  fi
}

letsencrypt_get() {
  APP="$1"
  SETTINGNAME="$2"
  DEFAULT="$3"

  # try getting setting from app config
  VALUE=$(dokku config:get $APP $SETTINGNAME)

  if [ -z "$VALUE" ]; then
    # try getting setting from global config
    VALUE=$(dokku config:get --global $SETTINGNAME)
  fi

  if [ -z "$VALUE" ]; then
    VALUE="$DEFAULT"
  fi

  echo "$VALUE"
}

letsencrypt_format_timediff() {
  TD="$1"

  if [ $TD -lt 0 ]; then
    NEGATIVE_TD=1
    TD=$(( - $TD ));
  fi

  DAYS=$(( $TD / (24 * 60 * 60) ));
  TD=$(($TD % (24 * 60 * 60) ));

  HOURS=$(( $TD / (60 * 60)));
  TD=$(($TD % (60 * 60)));

  MINUTES=$(( $TD / 60 ));
  SECS=$(( $TD % 60 ));

  RES=""
  if [ $DAYS -gt 0 ]; then
    RES="${DAYS}d, "
  fi

  if [ $HOURS -gt 0 ]; then
    RES="${RES}${HOURS}h, "
  fi

  if [ $MINUTES -gt 0 ]; then
    RES="${RES}${MINUTES}m, "
  fi

  if [ $SECS -gt 0 ]; then
    RES="${RES}${SECS}s, "
  fi

  RES=$( echo $RES | sed -re 's/, ?$//g');

  if [[ $NEGATIVE_TD == 1 ]]; then
    RES="${RES} ago"
  fi

  echo $RES
}

letsencrypt_get_expirydate() {
  # print SSL certificate expiry date as UNIX timestamp
  date -d "$(openssl x509 -in $DOKKU_ROOT/$1/tls/server.crt -enddate -noout | sed -e "s/^notAfter=//")" "+%s"
}

letsencrypt_is_active() {
  # checks if app is secured by let's encrypt
  APP=$1

  # check if SSL is enabled on per-app level
  if [[ "$(is_ssl_enabled $APP)" != "app" ]]; then
    return 1
  fi

  # determine where the currently installed certificate
  # points to. if this is not a symlink, will return an empty string
  CERT_LOCATION=$(readlink "$DOKKU_ROOT/$APP/tls/server.crt");

  # check if certificate is symlink pointing to the let's encrypt certificate for "$APP"
  if [[ "$CERT_LOCATION" != "$DOKKU_ROOT/$APP/letsencrypt/certs/current/fullchain.pem" ]]; then
    return 2
  fi

  echo "$APP"
}

letsencrypt_list_apps_and_expiry() {
  # list all letsencrypt-secured apps together with their expiry date
  # prints a tab-separated list of
  #  * app name
  #  * expiry dates as UNIX timestamp (seconds since epoch)
  #  * selected renewal grace period (in seconds)
  #  * time left on certificate (in seconds)
  #  * time until renewal (in seconds)

  for app in $( dokku_apps ); do
    if [[ "$(letsencrypt_is_active $app)" == "$app" ]]; then

      expiry=$(letsencrypt_get_expirydate $app)
      grace_period=$(letsencrypt_get $app DOKKU_LETSENCRYPT_GRACEPERIOD $LETSENCRYPT_GRACEPERIOD_DEFAULT);
      time_to_expiry=$(( $expiry - $(date +%s) ))
      time_to_renewal=$(( $expiry - $grace_period - $(date +%s) ))
      echo -e "$app\t$expiry\t$grace_period\t$time_to_expiry\t$time_to_renewal"
    fi
  done
}

letsencrypt_configure_and_get_dir() {
  # build up a string of all certificate-controlling configuration settings.
  # this will be used to determine the folder name for the account key and certificates

  # get the selected ACME server
  LETSENCRYPT_SERVER=$(letsencrypt_get $APP DOKKU_LETSENCRYPT_SERVER)
  if [ -z "$LETSENCRYPT_SERVER" ] ||  [ "$LETSENCRYPT_SERVER" == "default" ]; then
    LETSENCRYPT_SERVER="https://acme-v01.api.letsencrypt.org/directory"
  elif [ "$LETSENCRYPT_SERVER" == "staging" ]; then
    LETSENCRYPT_SERVER="https://acme-staging.api.letsencrypt.org/directory"
  fi

  # construct domain arguments
  DOMAINS=$(dokku domains "$APP" | sed "1,/=====> ${APP} Domain Names/d")
  DOMAIN_ARGS=''
  for DOMAIN in $DOMAINS; do
    dokku_log_verbose " - Domain '$DOMAIN'" >&2
    DOMAIN_ARGS="$DOMAIN_ARGS -d $DOMAIN"
  done

  LETSENCRYPT_CONFIG="--server $LETSENCRYPT_SERVER --email $LETSENCRYPT_EMAIL $DOMAIN_ARGS"
  LETSENCRYPT_CONFIG_HASH=$(echo "$LETSENCRYPT_CONFIG" | sha1sum | awk '{print $1}')
  LETSENCRYPT_CONFIG_DIR="$LETSENCRYPT_ROOT/certs/$LETSENCRYPT_CONFIG_HASH"
  LETSENCRYPT_CONFIG_FILE="$LETSENCRYPT_CONFIG_DIR/config"

  # create the config dir (if not available) and store config settings
  mkdir -p "$LETSENCRYPT_CONFIG_DIR"
  echo "$LETSENCRYPT_CONFIG" > "$LETSENCRYPT_CONFIG_FILE"

  echo "$LETSENCRYPT_CONFIG_DIR"
}

letsencrypt_check_email() {
  # check we have a valid e-mail address
  LETSENCRYPT_EMAIL=$(letsencrypt_get $APP DOKKU_LETSENCRYPT_EMAIL)
  if [ -z "$LETSENCRYPT_EMAIL" ]; then
    dokku_log_warn "ERROR: Cannot request a certificate without an e-mail address!"
    dokku_log_warn "  please provide your e-mail address using"
    dokku_log_warn "  dokku config:set --no-restart $APP DOKKU_LETSENCRYPT_EMAIL=<e-mail>"
    return 1
  fi
}

letsencrypt_acme () {
  letsencrypt_create_root

  dokku_log_info1 "Getting letsencrypt certificate for $APP..."

  LETSENCRYPT_CONFIG_DIR=$(letsencrypt_configure_and_get_dir)
  LETSENCRYPT_CONFIG=$(cat $LETSENCRYPT_CONFIG_DIR/config)

  LETSENCRYPT_GRACE=$(letsencrypt_get $APP DOKKU_LETSENCRYPT_GRACEPERIOD $LETSENCRYPT_GRACEPERIOD_DEFAULT)

  # run letsencrypt as a docker container using "certonly" mode
  # port 80 of the standalone webserver will be forwarded by the proxy
  set +e
  docker run --rm \
    -p $ACMEPORT:80 \
    -v "$LETSENCRYPT_CONFIG_DIR:/certs" \
    m3adow/letsencrypt-simp_le:latest \
    -f account_key.json \
    -f fullchain.pem -f chain.pem -f cert.pem -f key.pem \
    --valid_min ${LETSENCRYPT_GRACE} \
    $LETSENCRYPT_CONFIG

  SIMPLE_RESULT=$?
  set -e

  # handle simp_le return codes
  # see https://github.com/kuba/simp_le/blob/master/README.rst#manifest
  if [[ $SIMPLE_RESULT == 0 ]]; then
    # got certificate
    dokku_log_info1 "Certificate retrieved successfully."

  elif [[ $SIMPLE_RESULT == 1 ]]; then
    # no renewal necessary
    dokku_log_info1 "No renewal necessary"

  else
    # error - don't try to link certificates
    dokku_log_info1 "Certificate retrieval failed!"
    return

  fi

  letsencrypt_link $LETSENCRYPT_CONFIG_DIR
  nginx_build_config "$APP"
}

letsencrypt_acme_revoke () {
  letsencrypt_create_root

  dokku_log_info1 "Revoking letsencrypt certificate for $APP..."

  LETSENCRYPT_CONFIG_DIR=$(letsencrypt_configure_and_get_dir)
  LETSENCRYPT_CONFIG=$(cat $LETSENCRYPT_CONFIG_DIR/config)

  # run letsencrypt as a docker container using "certonly" mode
  # port 80 of the standalone webserver will be forwarded by the proxy
  set +e
  docker run --rm \
    -p $ACMEPORT:80 \
    -v "$LETSENCRYPT_CONFIG_DIR:/certs" \
    m3adow/letsencrypt-simp_le:latest \
    -f account_key.json \
    -f fullchain.pem -f chain.pem -f cert.pem -f key.pem \
    --revoke \
    $LETSENCRYPT_CONFIG

  SIMPLE_RESULT=$?
  set -e

  # handle simp_le return codes
  # see https://github.com/kuba/simp_le/blob/master/README.rst#manifest
  if [[ $SIMPLE_RESULT == 0 ]]; then
    # certificate revoked
    dokku_log_info1 "Certificate revoked successfully."

  else
    # error - don't try to link certificates
    dokku_log_info1 "Certificate revocation failed (code $SIMPLE_RESULT)!"
    return

  fi

  # move revoked certificates away
  mv -f $LETSENCRYPT_CONFIG_DIR/fullchain.pem{,.revoked}
  mv -f $LETSENCRYPT_CONFIG_DIR/chain.pem{,.revoked}
  mv -f $LETSENCRYPT_CONFIG_DIR/cert.pem{,.revoked}
  mv -f $LETSENCRYPT_CONFIG_DIR/key.pem{,.revoked}

  # removing the certificate will automatically reconfigure nginx
  dokku certs:remove $APP

}
